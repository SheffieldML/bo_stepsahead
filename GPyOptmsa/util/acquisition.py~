from ..dpp_samplers.dpp import sample_dual_conditional_dpp
from ..quadrature.emin_epmgp import emin_epmgp

def loss_nsahead(x, n_ahead, model, bounds):
    x = reshape(x,model.X.shape[1]) 
    n_data = x.shape[0]
    
    # --- fixed options
    num_data       = 500              # uniform samples
    n_replicates    = 10             # dpp replicates
    q             = 50             # truncation, for dual dpp

    # --- get values
    losses        = np.zeros((n_data,n_replicates))
    Y             = model.Y
    eta           = Y.min()
    
    X0            = samples_multidimensional_uniform(bounds,num_data)
    set1          = [1]
    
    for k in range(n_data):
        X             = np.vstack((x[k,:],X0))
       
        # --- define kernel matrix for the dpp
        L   = model.kern.K(X)
    
        for j in range(n_replicates):
            # --- take a sample from the dpp (need to re-index to start from zero)
            dpp_sample = sample_dual_conditional_dpp(L,set1,q,n_ahead)
            dpp_sample = np.ndarray.tolist(np.array(dpp_sample)-1)
          
            # evaluate GP at the sample and compute full covariance 
            m, K       = model.predict(X0[dpp_sample,:],full_cov=True)
       
            # compute the expected loss
            losses[k][j]  = emin_epmgp(m,K,eta)

        return losses.mean(1).reshape(n_data,1)

