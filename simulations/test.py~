import GPyOpt
import GPy
import numpy as np
from numpy.random import seed
from GPyOpt.util.general import samples_multidimensional_uniform, multigrid
import matplotlib.pyplot as plt

seed(12345)


## Problem definition    
bounds = [(-0.5*np.pi,0.5*np.pi),(-0.5*np.pi,0.5*np.pi)]

def f(x):
    x1 = x[:,0]
    x2 = x[:,1]
    y  = np.sin(x1)*np.sin(x2)
    return  y.reshape(len(y),1)

                                        # problem constrains 
input_dim = len(bounds)


# --- Problem definition and optimization
BO = GPyOpt.methods.BayesianOptimization(f=f,  
                                            model_data_init = 20,            # function to optimize       
                                            bounds=bounds,                # box-constrains of the problem
                                            acquisition='ELn',            # Selects the Expected improvement
                                            acquisition_par = 10)          # steps ahead          
    
BO.model.optimize()

#x = samples_multidimensional_uniform(bounds,500)
n = 5
x_acq = multigrid(bounds, n)
y_acq = BO.acquisition_func.acquisition_function(x_acq)


# GPy model on the points
kernel      = GPy.kern.RBF(2, variance=.1, lengthscale=.1)
model_acq   = GPy.models.GPRegression(x_acq,y_acq,kernel=kernel)
model_acq.optimize()



X1 = np.linspace(bounds[0][0], bounds[0][1], n)
X2 = np.linspace(bounds[1][0], bounds[1][1], n)
x1, x2 = np.meshgrid(X1, X2)
Xplot = np.hstack((x1.reshape(n*n,1),x2.reshape(n*n,1)))
z = model_acq.predict(Xplot)
plt.contourf(X1, X2, y_acq.reshape(n,n),100)
plt.plot(BO.X[:,0],BO.X[:,1],'k.',markersize=20)



